# üì¶ Required packages: pip install boxoffice_api pandas openpyxl
from boxoffice_api import BoxOffice
import pandas as pd
import os

def fetch_by_timeframe(start_year, end_year):
    """
    Fetch box office data by distributor for each month, quarter, and year.
    Returns a combined pandas DataFrame.
    """
    box = BoxOffice(outputformat="DF")
    records = []

    for year in range(start_year, end_year + 1):
        print(f"Fetching {year} yearly data...")
        try:
            yearly = box.get_yearly(year=year)
            yearly["Period"] = f"{year}"
            yearly["Timeframe"] = "Yearly"
            records.append(yearly)
        except Exception as e:
            print(f"Yearly data for {year} failed: {e}")

        for qt in range(1, 5):
            print(f"Fetching {year} Q{qt} data...")
            try:
                quarterly = box.get_quarterly(year=year, quarterly=qt)
                quarterly["Period"] = f"{year} Q{qt}"
                quarterly["Timeframe"] = "Quarterly"
                records.append(quarterly)
            except Exception as e:
                print(f"Quarterly data for {year} Q{qt} failed: {e}")

        for month in range(1, 13):
            print(f"Fetching {year}-{month:02d} monthly data...")
            try:
                monthly = box.get_monthly(year=year, month=month)
                monthly["Period"] = f"{year}-{month:02d}"
                monthly["Timeframe"] = "Monthly"
                records.append(monthly)
            except Exception as e:
                print(f"Monthly data for {year}-{month:02d} failed: {e}")

    # Combine all fetched data
    if records:
        combined = pd.concat(records, ignore_index=True)
    else:
        combined = pd.DataFrame()

    return combined

def main():
    start_year = 2000
    end_year = 2024

    print("‚è≥ Fetching data, please wait...")
    df = fetch_by_timeframe(start_year, end_year)

    if df.empty:
        print("‚ùå No data fetched. Check your internet connection or the API availability.")
        return

    # Inspect available columns
    print("üìä Columns in the fetched data:")
    print(df.columns)

    # Try to locate the gross column name (guess common ones)
    gross_column = None
    for col in df.columns:
        if "gross" in col.lower():
            gross_column = col
            break

    if not gross_column:
        print("‚ùå Could not find a gross revenue column. Please check the data.")
        print("Here‚Äôs a preview:")
        print(df.head())
        return

    print(f"‚úÖ Using '{gross_column}' as gross revenue column.")

    # Group/aggregate by period and distributor
    summary = df.groupby(
        ["Timeframe", "Period", "Distributor"]
    )[gross_column].sum().reset_index()

    # Save to Desktop
    desktop_path = os.path.join(os.path.expanduser("~"), "OneDrive", "Desktop", "box_office_by_distributor.xlsx")
    with pd.ExcelWriter(desktop_path) as writer:
        summary.to_excel(writer, sheet_name="Summary", index=False)
        df.to_excel(writer, sheet_name="Raw Data", index=False)

    print(f"‚úÖ Excel file saved to: {desktop_path}")

if __name__ == "__main__":
    main()
